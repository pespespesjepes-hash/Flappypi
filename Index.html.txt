<!doctype html>
<html lang="cs">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Arcade Pi — Leaderboard</title>
  <meta name="description" content="Arcade hra s uložením skóre za 1.5 Pi. Připraveno pro Pi Browser." />
  <style>
    :root{--bg:#0f1220;--panel:#151a2e;--accent:#6c5ce7;--muted:#9aa3c7;}
    body { font-family: system-ui, -apple-system, "Segoe UI", Roboto, Arial; margin:0; background:var(--bg); color:#eee; }
    header, footer { padding:12px 16px; background:#171a2b; border-bottom:1px solid #262b44; }
    main { padding:16px; max-width:920px; margin:0 auto; }
    .row { display:flex; gap:12px; align-items:center; flex-wrap:wrap; }
    .btn { background:var(--accent); color:white; border:none; padding:10px 14px; border-radius:10px; cursor:pointer; font-weight:600; }
    .btn.secondary { background:#2d325a; }
    .btn.ghost { background:transparent; border:1px solid #2a3158; color:#cfe7ff; }
    .btn:disabled { opacity:.5; cursor:not-allowed; }
    .panel { background:var(--panel); border:1px solid #2a3158; border-radius:12px; padding:16px; margin-top:16px; }
    canvas.game { background:#0b0e1a; border:1px solid #2a3158; width:100%; max-width:560px; height:320px; display:block; border-radius:8px; }
    label { display:block; margin:8px 0 4px; font-size:14px; color:#cbd3ff; }
    input, textarea { width:100%; padding:10px; border-radius:8px; border:1px solid #2a3158; background:#0f1430; color:#fff; }
    .grid { display:grid; grid-template-columns:1fr; gap:12px; }
    .leaderboard { margin-top:16px; }
    .lb-item { display:flex; justify-content:space-between; padding:8px 10px; background:#11152a; border:1px solid #232a50; border-radius:8px; }
    .muted { color:var(--muted); font-size:13px; }
    .notice { font-size:13px; color:#ffda79; }
    a { color:#7dc4ff; text-decoration:none; }
    .ok { color:#7CFC86; }
    .err { color:#ff7b7b; }
    .small { font-size:13px; color:var(--muted); }
    .controls { gap:8px; }
    .hide { display:none; }
    .flex { display:flex; gap:8px; align-items:center; }
    .center { text-align:center; }
    .chip { padding:6px 10px; border-radius:999px; background:#121428; border:1px solid #252a49; }
    footer .muted { font-size:12px; }
    /* responsive */
    @media (min-width:720px){ .grid{ grid-template-columns:1fr 320px; } }
  </style>
</head>
<body>
  <header>
    <div class="row" style="justify-content:space-between; align-items:center;">
      <div><strong>Arcade</strong><div class="small muted">Leaderboard • Uložení skóre (1.5 Pi)</div></div>
      <div class="row">
        <span id="piDetected" class="chip muted">Ne v Pi Browseru</span>
      </div>
    </div>
  </header>

  <main>
    <div class="panel">
      <div class="row" style="gap:16px;">
        <div style="flex:1;">
          <canvas id="game" class="game" width="640" height="360"></canvas>
          <div class="row" style="margin-top:10px;">
            <button class="btn" id="btnGameOver">Game Over (demo)</button>
            <button class="btn ghost" id="btnShare" title="Sdílet odkaz ke hře">Sdílet hru</button>
            <div class="muted">Klikni do plátna pro zvýšení skóre. (Demo)</div>
          </div>
        </div>

        <div style="width:320px;">
          <div class="panel">
            <div class="row" style="justify-content:space-between;">
              <strong>Tvůj stav</strong>
              <div class="muted">Skóre • Stav</div>
            </div>
            <div style="margin-top:10px;">
              <div class="row" style="justify-content:space-between;">
                <div><strong>Aktuální skóre</strong></div>
                <div id="scoreBadge" class="chip">0</div>
              </div>
              <div style="margin-top:12px;">
                <div class="muted">Uložená data v demo verzi jsou lokální. Pro produkci nastav backend.</div>
              </div>
            </div>
          </div>

          <div class="panel" style="margin-top:12px;">
            <strong>Nejlepší hráči</strong>
            <div class="muted" style="margin-top:8px;">Veřejné záznamy: nickname • score • datum</div>
            <div id="lbList" style="margin-top:10px;"></div>
            <div class="muted" id="lbEmpty" style="margin-top:8px;">Zatím žádná uložená skóre.</div>
          </div>
        </div>
      </div>
    </div>

    <!-- Game Over / Save panel -->
    <div id="gameOverPanel" class="panel hide">
      <div class="row" style="justify-content:space-between;">
        <div><strong>Tvoje skóre:</strong> <span id="finalScore">0</span></div>
        <div class="row controls">
          <button class="btn" id="btnSave">Uložit score (1.5 Pi)</button>
          <button class="btn secondary" id="btnRetry">Hrát znovu</button>
        </div>
      </div>

      <div id="donatePanel" class="panel hide" style="margin-top:12px;">
        <div class="grid">
          <div>
            <label>Nickname (povinné)</label>
            <input id="nickname" placeholder="Zadej přezdívku (max 24)" maxlength="24" />
          </div>
          <div>
            <label>TX ID (po zaplacení vlož hash/ID transakce)</label>
            <input id="txid" placeholder="Vlož TX ID z walletu" />
            <div class="muted small">Pošleš 1.5 Pi, poté zkopíruj/ vlož TX hash — na serveru bude ověřeno.</div>
          </div>
          <div class="row" style="align-items:center;">
            <button class="btn" id="btnConfirm">Potvrdit platbu</button>
            <button class="btn ghost" id="btnExportPending" title="Export pending JSON">Export čekajících</button>
            <span id="confirmMsg" class="muted"></span>
          </div>

          <div>
            <label>Zaplatit 1.5 Pi na adresu</label>
            <div class="muted" id="addrText" style="word-break:break-all;">GDUBPF4GEXGE3MWBBUOUJORYWRYOWB5JHTU77IYNCYCU2CWZWH5QIAVA</div>
            <div style="margin-top:8px;" class="row">
              <button class="btn ghost" id="btnCopyAddr">Kopírovat adresu</button>
              <button class="btn ghost" id="btnCopyPayLink">Kopírovat odkaz</button>
              <button class="btn ghost" id="btnOpenPi">Otevřít v Pi Browseru</button>
            </div>
          </div>

          <div class="row" style="align-items:flex-start;">
            <div style="flex:1;">
              <div class="muted">Odkaz pro platbu</div>
              <a id="payLink" target="_blank" rel="noopener"></a>
              <div class="notice">Otevři v Pi Browseru nebo naskenuj QR. Nic se neposílá automaticky.</div>
            </div>
            <div>
              <div class="muted">QR kód</div>
              <canvas id="qrcanvas" width="160" height="160" class="qr" style="background:#fff;border-radius:8px;"></canvas>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Admin / Pending (lokální) -->
    <div class="panel" style="margin-top:16px;">
      <div class="row" style="justify-content:space-between;">
        <strong>Čekající požadavky (lokálně)</strong>
        <div class="muted">Můžeš exportovat a nahrát do backendu k manuálnímu ověření.</div>
      </div>
      <div id="pendingList" style="margin-top:10px;"></div>
      <div class="row" style="margin-top:10px;">
        <button class="btn ghost" id="btnClearPending">Vymazat lokální čekající</button>
      </div>
    </div>
  </main>

  <footer>
    <div class="muted">Manuální ověření plateb — záznam se přidá po kontrole. Pro produkci implementuj serverové ověření transakcí.</div>
  </footer>

  <script>
    /******************************************************************
     * Konfigurace - uprav dle potřeby
     ******************************************************************/
    const ADDRESS = "GDUBPF4GEXGE3MWBBUOUJORYWRYOWB5JHTU77IYNCYCU2CWZWH5QIAVA";
    const AMOUNT = 1.5;
    const STORAGE_KEY = "arcade_leaderboard_v1";
    const PENDING_KEY = "arcade_pending_v1";

    /******************************************************************
     * Pi Browser detection (jednoduché)
     ******************************************************************/
    function isPiBrowser() {
      try {
        const ua = navigator.userAgent || "";
        return /PiBrowser|Pi Network/i.test(ua);
      } catch(e){ return false; }
    }

    const piDetectedEl = document.getElementById("piDetected");
    if (isPiBrowser()) {
      piDetectedEl.textContent = "V Pi Browseru ✓";
      piDetectedEl.classList.remove("muted");
      piDetectedEl.style.background = "#0b2a13";
    }

    /******************************************************************
     * Hra (demo)
     ******************************************************************/
    const canvas = document.getElementById("game");
    const ctx = canvas.getContext("2d");
    let score = 0;
    function draw() {
      ctx.fillStyle = "#0b0e1a"; ctx.fillRect(0,0,canvas.width,canvas.height);
      ctx.fillStyle = "#7dc4ff"; ctx.font = "18px system-ui";
      ctx.fillText("Klikni do plátna pro zvýšení skóre", 16, 28);
      ctx.font = "36px system-ui";
      ctx.fillStyle = "#7CFC86";
      ctx.fillText("Skóre: " + score, 16, 70);
    }
    canvas.addEventListener("click", () => { score++; draw(); updateScoreBadge(); });
    draw();

    function updateScoreBadge(){ document.getElementById("scoreBadge").textContent = score; }

    document.getElementById("btnGameOver").addEventListener("click", () => {
      document.getElementById("finalScore").textContent = score;
      document.getElementById("gameOverPanel").classList.remove("hide");
      document.getElementById("donatePanel").classList.add("hide");
      window.scrollTo({ top: document.getElementById("gameOverPanel").offsetTop - 8, behavior: "smooth" });
    });

    document.getElementById("btnRetry").addEventListener("click", () => {
      score = 0; draw(); updateScoreBadge();
      document.getElementById("gameOverPanel").classList.add("hide");
      document.getElementById("donatePanel").classList.add("hide");
    });

    document.getElementById("btnSave").addEventListener("click", () => {
      document.getElementById("donatePanel").classList.remove("hide");
      setupPaymentUI();
      loadPending(); // zobraz lokální
    });

    /******************************************************************
     * Payment UI & QR
     ******************************************************************/
    const payLinkEl = document.getElementById("payLink");
    const qrCanvas = document.getElementById("qrcanvas");
    function setupPaymentUI() {
      const url = `pi://${ADDRESS}?amount=${AMOUNT}`;
      payLinkEl.textContent = url;
      payLinkEl.href = url;
      document.getElementById("addrText").textContent = ADDRESS;
      drawQR(qrCanvas, url);
    }

    // jednoduchý QR fallback: zkus Google Charts (pokud ti nevadí externí volání).
    // Doporučeno: přidat lokální knihovnu qrcode.min.js a nahradit drawQR() voláním této knihovny
    function drawQR(canvas, text) {
      const ctx = canvas.getContext("2d");
      const size = canvas.width;
      ctx.fillStyle = "#fff"; ctx.fillRect(0,0,size,size);
      // image fallback z Google
      const img = new Image();
      img.crossOrigin = "anonymous";
      img.onload = () => { ctx.drawImage(img, 0, 0, size, size); };
      img.onerror = () => {
        // jednoduchý placeholder
        ctx.fillStyle = "#000"; ctx.fillRect(4,4,size-8,size-8);
        ctx.fillStyle = "#fff"; ctx.font = "12px system-ui"; ctx.fillText("QR nelze načíst", 10, size/2);
      };
      img.src = `https://chart.googleapis.com/chart?cht=qr&chs=${size}x${size}&chl=${encodeURIComponent(text)}`;
    }

    // Pomocné tlačítka
    document.getElementById("btnCopyAddr").addEventListener("click", async () => {
      await navigator.clipboard.writeText(ADDRESS);
      flashMsg("Adresa zkopírována");
    });
    document.getElementById("btnCopyPayLink").addEventListener("click", async () => {
      const url = `pi://${ADDRESS}?amount=${AMOUNT}`;
      await navigator.clipboard.writeText(url);
      flashMsg("Platební odkaz zkopírován");
    });
    document.getElementById("btnOpenPi").addEventListener("click", () => {
      // Pokus o otevření v Pi Browser (deep link)
      const url = `pi://${ADDRESS}?amount=${AMOUNT}`;
      window.location.href = url;
    });

    // Share tlačítko
    document.getElementById("btnShare").addEventListener("click", async () => {
      const shareUrl = location.href;
      if (navigator.share) {
        try { await navigator.share({ title: "Arcade Pi — hra", text: "Hraj Arcade a ukládej skóre", url: shareUrl }); }
        catch(e){ /* ignore */ }
      } else {
        await navigator.clipboard.writeText(shareUrl);
        flashMsg("Odkaz zkopírován do schránky");
      }
    });

    function flashMsg(msg) {
      const el = document.getElementById("confirmMsg");
      el.textContent = msg; el.className = "ok";
      setTimeout(()=>{ el.textContent = ""; el.className = "muted"; }, 2500);
    }

    /******************************************************************
     * Leaderboard (lokální demo) + Pending
     ******************************************************************/
    const lbList = document.getElementById("lbList");
    const lbEmpty = document.getElementById("lbEmpty");
    function loadLB() {
      const data = JSON.parse(localStorage.getItem(STORAGE_KEY) || "[]");
      renderLB(data);
    }
    function renderLB(items) {
      lbList.innerHTML = "";
      if (!items.length) { lbEmpty.style.display = "block"; return; }
      lbEmpty.style.display = "none";
      items.sort((a,b)=>b.score-a.score);
      const top = items.slice(0,10);
      top.forEach((it, idx) => {
        const row = document.createElement("div");
        row.className = "lb-item";
        const date = new Date(it.ts);
        row.innerHTML = `<span>#${idx+1} • ${escapeHtml(it.nick)}</span><span>${it.score} • <span class="muted">${date.toLocaleString()}</span></span>`;
        lbList.appendChild(row);
      });
    }
    function addToLB(nick, score) {
      const all = JSON.parse(localStorage.getItem(STORAGE_KEY) || "[]");
      all.push({ nick, score, ts: Date.now() });
      localStorage.setItem(STORAGE_KEY, JSON.stringify(all));
      loadLB();
    }

    // Pending (lokální evidence odeslaných žádostí)
    function savePendingRequest(req) {
      const all = JSON.parse(localStorage.getItem(PENDING_KEY) || "[]");
      all.push(req);
      localStorage.setItem(PENDING_KEY, JSON.stringify(all));
      loadPending();
    }
    function loadPending() {
      const all = JSON.parse(localStorage.getItem(PENDING_KEY) || "[]");
      const el = document.getElementById("pendingList");
      el.innerHTML = "";
      if(!all.length){ el.innerHTML = '<div class="muted">Žádné lokální čekající.</div>'; return; }
      all.forEach((p, i) => {
        const row = document.createElement("div");
        row.className = "lb-item";
        const d = new Date(p.ts).toLocaleString();
        row.innerHTML = `<span>${escapeHtml(p.nick)} • ${p.score}</span><span class="muted">${d}</span>`;
        el.appendChild(row);
      });
    }

    document.getElementById("btnClearPending").addEventListener("click", () => {
      if (!confirm("Smazat všechny lokální čekající záznamy?")) return;
      localStorage.removeItem(PENDING_KEY);
      loadPending();
    });

    document.getElementById("btnExportPending").addEventListener("click", () => {
      const all = JSON.parse(localStorage.getItem(PENDING_KEY) || "[]");
      const blob = new Blob([JSON.stringify(all, null, 2)], {type:"application/json"});
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url; a.download = "pending_arcade.json"; a.click();
      URL.revokeObjectURL(url);
    });

    /******************************************************************
     * Confirm payment (client-side) - pouze lokalní simulace
     * V produkci: Tento krok by měl volat server, který ověří tx přímo
     * v síti / přes Pi explorer apod. A až po ověření uloží skóre.
     ******************************************************************/
    document.getElementById("btnConfirm").addEventListener("click", async () => {
      const nick = document.getElementById("nickname").value.trim();
      const txid = document.getElementById("txid").value.trim();
      const fscore = Number(document.getElementById("finalScore").textContent || 0);
      const msgEl = document.getElementById("confirmMsg");

      if (!nick) { msgEl.textContent = "Vyplň prosím nickname."; msgEl.className = "err"; return; }
      if (!txid) { msgEl.textContent = "Vlož prosím TX ID (po zaplacení)."; msgEl.className = "err"; return; }
      if (fscore <= 0) { msgEl.textContent = "Skóre musí být větší než 0."; msgEl.className = "err"; return; }
      // Uložíme lokálně jako "čekající", aby admin / server mohl ověřit
      const req = { nick, score: fscore, txid, amount: AMOUNT, to: ADDRESS, ts: Date.now(), status: "pending" };
      savePendingRequest(req);
      msgEl.textContent = "Žádost o ověření odeslána lokálně. Po ověření se přidá do žebříčku."; msgEl.className = "ok";

      // Volitelně: pokud máš backend endpoint, odkomentuj níže a uprav URL
      /*
      try {
        const resp = await fetch("/api/submit-pending", {
          method:"POST",
          headers:{"Content-Type":"application/json"},
          body: JSON.stringify(req)
        });
        const j = await resp.json();
        if (resp.ok) {
          msgEl.textContent = "Požadavek odeslán na server k ověření.";
        } else {
          msgEl.textContent = "Chyba při odesílání na server: " + (j?.error || resp.status);
          msgEl.className = "err";
        }
      } catch(e) {
        msgEl.textContent = "Chyba: nelze kontaktovat server.";
        msgEl.className = "err";
      }
      */
    });

    /******************************************************************
     * Utility
     ******************************************************************/
    function escapeHtml(s) {
      return String(s).replace(/[&<>"']/g, m => ({ "&":"&amp;","<":"&lt;",">":"&gt;","\"":"&quot;","'":"&#039;" }[m]));
    }

    // Inicializace UI
    loadLB();
    loadPending();
